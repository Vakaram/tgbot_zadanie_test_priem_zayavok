#https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/custom_states.py
import telebot  # telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
from telebot import custom_filters
from telebot.handler_backends import State, StatesGroup  # States
from telebot.storage import StateMemoryStorage
from create_bot import telebot_test
from database.create_database import create_database_all
from database.add_table_values import *
from psycopg2 import Error
import logging
import re

def buttons_main_menu(message): #–ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—é –º–µ–Ω—é—à–∫—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìõ –ó–∞—è–≤–∫–∞")
    btn2 = types.KeyboardButton("üìû –°–≤—è–∑—å")
    markup.add(btn1, btn2)
    btn3 = types.KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    btn4 = types.KeyboardButton("‚òé –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add(btn3)
    markup.add(btn4)

    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–∞–∑ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É".format(message.from_user), reply_markup=markup)
    print('–Ø –¥–æ—à—ë–ª –¥–æ –∫–æ–Ω—Ü–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ')


print('–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è')

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(telebot_test,state_storage=state_storage)
create_database_all() #–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥, —Å–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É(–¥–∞–ª—å—à–µ –∏—Ö –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –¥–æ–ø–∏—à—É —Å –ø–µ—Ä–≤–∏—á–Ω—ã–º –∫–ª—é—á—ë–º –∏ –±–µ–∑

class MyStates(StatesGroup):
    name = State()
    phone = State()

@bot.message_handler(commands=['start'])
def start_ex(message):
    def zapros_bd():
        try:
            id_tg_user = message.from_user.id
            connection = psycopg2.connect(user="postgres",
                                          # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                                          password="admin",
                                          host="127.0.0.1",
                                          port="5432",
                                          database="tg_bot_priyom_zayavok")
            connection.autocommit = True  # –ø–æ—Å—Ç–æ—è—è–Ω–æ —Å–∞–º –∫–æ–º–º–∏—Ç–∏—Ç –¥–∞–Ω–Ω—ã–µ
            cursor = connection.cursor()
            proverka = cursor.execute(
                "SELECT id_tg FROM registration_tg_users WHERE id_tg = %s",
                (id_tg_user,)
            )
            proverka = cursor.fetchall()
            print(proverka)
            if proverka:
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î –≤–∏–∂—É —ç—Ç–æ –ø–æ –±–∞–∑–µ")
                return True
            else:
                print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î –≤–∏–∂—É —ç—Ç–æ –ø–æ –±–∞–∑–µ')
                return None
        except (Exception, psycopg2.Error) as error:
            print("Error while fetching data from PostgreSQL", error)

        finally:
            # closing database connection.
            if connection:
                cursor.close()
                connection.close()
    #–ø—Ä–æ–≤–µ—Ä–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –∏ –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–º –µ–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–ª –∫–æ–≥–¥–∞ —Ç–æ —á–∞—Ç, —Ç–æ –≤—ã–¥–∞—é –∫–Ω–æ–ø–∫–∏
    if zapros_bd() is True:
        print('–Ø –≤–∏–∂—É –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ –±–¥')
        bot.delete_state(message.from_user.id, message.chat.id) #–¥–æ–±–∞–≤–∏–ª 29.10 –ø–æ—Ç–æ–º—É—á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–¥–æ –±—ã–ª–æ —á–∏—Å—Ç–∏—Ç—å —á—Ç–æ–±—ã –∫–æ–¥ –¥–∞–ª—å—à–µ —à–∞–≥–∞–ª
        buttons_main_menu(message)
    else:
        print('–Ø –≤–∏–∂—É –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á—Ç–æ –µ–≥–æ –Ω–µ—Ç –≤ –±–¥')
        bot.set_state(message.from_user.id, MyStates.name, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
        @bot.message_handler(state="*", commands=['/cancel']) #–æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–∏–ø–æ –Ω–µ –≤–≤–æ–¥–∏—Ç—å, –≤—ã–π—Ç–∏ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–µ cancel
        def any_state(message):
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –≤–≤–µ–¥–∏—Ç–µ /start ")
            bot.delete_state(message.from_user.id, message.chat.id)

        @bot.message_handler(state=MyStates.name)
        def name_get(message):
            regular_phone = r'^[–ê-–Ø]{1}[–∞-—è]{1,100}\s[–ê-–Ø]{1}[–∞-—è]{1,100}$'
            name_user = message.text
            if re.match(regular_phone, name_user) is not None: #–≤ —Ç—Ä—É –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                bot.set_state(message.from_user.id, MyStates.phone, message.chat.id)
                bot.send_message(message.chat.id, '–¢–µ–ª–µ—Ñ–æ–Ω:', parse_mode='html')
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['name'] = message.text
                print('–ò–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç')
            else:
                bot.set_state(message.from_user.id, MyStates.name, message.chat.id)
                bot.send_message(message.chat.id, '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ü—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ :', parse_mode='html')
                print('–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ò–º—è ')

        @bot.message_handler(state=MyStates.phone) #–ø—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
        def ready_for_answer(message):
            phone_user = message.text
            regular_phone = r'[+][7][0-9]{10}$'
            if re.match(regular_phone, phone_user) is not None:
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['phone'] = message.text
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    msg = (f"name: {data['name']}\n"
                           f"phone: {data['phone']}\n")
                    id_tg_user = message.from_user.id
                    all_name_user = data['name']
                    phone_user = data['phone']
                    print(msg)
                    print(id_tg_user)
                    try:
                        connection = psycopg2.connect(user="postgres",
                                                      password="admin",
                                                      host="127.0.0.1",
                                                      port="5432",
                                                      database="tg_bot_priyom_zayavok")
                        connection.autocommit = True  # –ø–æ—Å—Ç–æ—è—è–Ω–æ —Å–∞–º –∫–æ–º–º–∏—Ç–∏—Ç –¥–∞–Ω–Ω—ã–µ
                        with connection.cursor() as cursor:  # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
                            cursor.execute(
                                """
                                INSERT INTO registration_tg_users (id_tg, all_name, phone)
                                VALUES(%s, %s, %s)
                                """,
                                (id_tg_user, all_name_user, phone_user)
                            )
                            logging.warning('–ó–∞–ø–∏—Å–∞–ª –¥–∞–Ω–Ω—ã–µ')
                            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ –≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º:', parse_mode='html')
                    except (Exception, Error) as error:
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL", error)
                    finally:
                        if connection:
                            connection.close()
                            print('bd –∑–∞–∫—Ä—ã–ª–∏')
                    print('–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç')
                bot.delete_state(message.from_user.id, message.chat.id)
                buttons_main_menu(message) #–µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –≤–≤—ë–ª —Ç–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            else:
                bot.send_message(message.chat.id, '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞–¥–æ +7 –∏ –≤—Å–µ–≥–æ 11 —Ü–∏—Ñ—Ä:', parse_mode='html')
                bot.set_state(message.from_user.id, MyStates.phone, message.chat.id)
                print('–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω ')

        # TODO: –î–ª—è —ç—Ç–æ–π —á–∞—Å—Ç–∏ –∫–æ–¥–∞ ,  –ø–æ–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
        bot.add_custom_filter(custom_filters.StateFilter(bot)) #—Ö–º —á—Ç–æ–∂–µ –¥–µ–ª–∞—é—Ç —ç—Ç–æ –¥–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞–¥–æ–±—ã —É–∑–Ω–∞—Ç—å
        bot.add_custom_filter(custom_filters.IsDigitFilter())

# @bot.message_handler()  # —Ç—É—Ç –ø–æ—à–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏
# def ostavit_zayavka(message):
#     if message.text == 'üìõ –ó–∞—è–≤–∫–∞':
#         bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∞–π –¥–∞–ª—å—à–µ –ø–æ–ø—Ä–æ–±—É—é —Ç–µ–ø–µ—Ä—å –ø–æ–º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ç ")
# #         bot.set_state(message.from_user.id, MyStates.zayavka, message.chat.id)
#
#
# @bot.message_handler(state=MyStates.zayavka) #—Å
# def ready_for_answer(message):
#     bot.send_message(message.chat.id, "–Ø –ø–æ–ø–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—è–≤–∫–∏")


#
# btn1 = types.KeyboardButton("üìõ –ó–∞—è–≤–∫–∞")
#     btn = types.KeyboardButton("üìû –°–≤—è–∑—å")
#     markup.add(btn1, btn2)
#     btn3 = types.KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
#     btn4 = types.KeyboardButton("‚òé –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")






bot.infinity_polling(skip_pending=True)

