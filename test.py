
import telebot  # telebot
from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
from telebot import custom_filters
from telebot.handler_backends import State, StatesGroup  # States
from telebot.storage import StateMemoryStorage
from buttons.buttons import buttons_main_menu, buttons_main_ostavitzayavka_podelitsa_nazad, buttons_svazatsa
from create_bot import telebot_test
from database.CREATE_DATABASE import create_database_tg_bot_priyom_zayavok
from database.add_delete_update_table import PostgreSQL, bd_add_delete_update
from database.create_table import create_database_all
from psycopg2 import Error
import logging
import re
import time

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∑–∞–ø—É—Å—Ç–∏–ª—Å—è')

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(telebot_test, state_storage=state_storage)

create_database_tg_bot_priyom_zayavok()#—Å–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—É—é –∏ –ø–æ–∫–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# time.sleep(1)
# #–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –ø–æ—á–µ–º—É —Ç–æ —Ö–º –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø–æ—Ç–æ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
# create_database_all.create_table_registration_tg_users() #–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–º—è —Ñ–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω id
# time.sleep(1)
#
# create_database_all.create_table_zayavka_tg_users() #–∑–∞–≤–∏—Å–∏–º–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ id
#

class MyStates(StatesGroup):
    name = State()
    phone = State()
    zayavka_step1 = State()
    zayavka_step2 = State()
    zayavka_step3 = State()



@bot.message_handler(commands=['start'])
def start_ex(message):
    tg_id = message.from_user.id
    if bd_add_delete_update.check_in_bd(tg_id) is True:                    # –ø—Ä–æ–≤–µ—Ä–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –∏ –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–º –µ–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–ª –∫–æ–≥–¥–∞ —Ç–æ —á–∞—Ç, —Ç–æ –≤—ã–¥–∞—é –∫–Ω–æ–ø–∫–∏
        print('–Ø –≤–∏–∂—É –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ –±–¥')
        bot.delete_state(message.from_user.id,message.chat.id)              # –¥–æ–±–∞–≤–∏–ª 29.10 –ø–æ—Ç–æ–º—É—á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–¥–æ –±—ã–ª–æ —á–∏—Å—Ç–∏—Ç—å —á—Ç–æ–±—ã –∫–æ–¥ –¥–∞–ª—å—à–µ —à–∞–≥–∞–ª
        #–Ω–∏–∂–µ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–≤–∫—É —Å–º—Å –≤ markup –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(message.chat.id,text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–∞–∑ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É".format(
                            message.from_user), reply_markup=buttons_main_menu())
    else:
        print('–Ø –≤–∏–∂—É –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á—Ç–æ –µ–≥–æ –Ω–µ—Ç –≤ –±–¥')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
        bot.set_state(message.from_user.id, MyStates.name, message.chat.id)
        print('—è –ø–µ—Ä–µ–≤—ë–ª –µ–≥–æ –≤ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ name')

@bot.message_handler(state="*", commands=['/cancel'])  # –æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–∏–ø–æ –Ω–µ –≤–≤–æ–¥–∏—Ç—å, –≤—ã–π—Ç–∏ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–µ cancel
def any_state(message):
    bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –≤–≤–µ–¥–∏—Ç–µ /start ")
    bot.delete_state(message.from_user.id, message.chat.id)

@bot.message_handler(state=MyStates.name)
def name_get(message):
    regular_phone = r'^[–ê-–Ø]{1}[–∞-—è]{1,100}\s[–ê-–Ø]{1}[–∞-—è]{1,100}$'
    tg_id = message.from_user.id
    name_surname = message.text
    if re.match(regular_phone, name_surname) is not None:  # –≤ —Ç—Ä—É –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        bot.set_state(message.from_user.id, MyStates.phone, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω +7 –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:', parse_mode='html')
        bd_add_delete_update.add_name_surname(tg_id,name_surname)
    else:
        bot.set_state(message.from_user.id, MyStates.name, message.chat.id)
        bot.send_message(message.chat.id, '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ü—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ :', parse_mode='html')
        print('–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ò–º—è ')

@bot.message_handler(state=MyStates.phone)  # –ø—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
def ready_for_answer(message):
    phone = message.text
    tg_id = message.from_user.id
    regular_phone = r'[+][7][0-9]{10}$'
    if re.match(regular_phone, phone) is not None:
        bd_add_delete_update.add_phone(tg_id,phone)
        bot.delete_state(message.from_user.id, message.chat.id)
        bot.send_message(message.chat.id, #—Å–æ–∑–¥–∞–ª –º–µ–Ω—é –≤ –æ–±—â–µ–º.
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–∞–∑ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É".format(
                             message.from_user), reply_markup=buttons_main_menu())
    else:
        bot.send_message(message.chat.id, '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞–¥–æ +7 –∏ –≤—Å–µ–≥–æ 11 —Ü–∏—Ñ—Ä:', parse_mode='html')
        bot.set_state(message.from_user.id, MyStates.phone, message.chat.id)
        print('–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω ')

@bot.message_handler(state=MyStates.zayavka_step1)
def zayavka_step1(message): #–∫–ª–∞—Å—Å,—Ç–æ —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ —à–∞–≥ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π
    print("–Ø –≤–Ω—É—Ç—Ä–∏ 1 —à–∞–∞–≥ ")
    location = message.text #–Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏ –∑–∞–ø–∏—Å–∞—Ç—å id )
    bot.send_message(message.chat.id, '–®–∞–≥ 2/3: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ', parse_mode='html')
    bot.set_state(message.from_user.id, MyStates.zayavka_step2, message.chat.id)
    #–í—ã–∑–≤–∞—Ç—å inline –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–º –ø–æ–∂–∞–ª—É–π

@bot.message_handler(state=MyStates.zayavka_step2)
def zayavka_step1(message): #–∫–ª–∞—Å—Å,—Ç–æ —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ —à–∞–≥ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π
    print("–Ø –≤–Ω—É—Ç—Ä–∏ 2 —à–∞–∞–≥ ")
    location = message.text #–Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏ –∑–∞–ø–∏—Å–∞—Ç—å id )
    bot.send_message(message.chat.id, '–®–∞–≥ 3/3: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö ', parse_mode='html')
    bot.set_state(message.from_user.id, MyStates.zayavka_step3, message.chat.id)
    #–í—ã–∑–≤–∞—Ç—å inline –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–º –ø–æ–∂–∞–ª—É–π

@bot.message_handler(state=MyStates.zayavka_step3)
def zayavka_step1(message): #–∫–ª–∞—Å—Å,—Ç–æ —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ —à–∞–≥ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π
    print("–Ø –≤–Ω—É—Ç—Ä–∏ 3 —à–∞–∞–≥ ")
    location = message.text #–Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∏ –∑–∞–ø–∏—Å–∞—Ç—å id )
    bot.send_message(message.chat.id, '–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', parse_mode='html')
    bot.set_state(message.from_user.id, MyStates.zayavka_step2, message.chat.id)
    bot.delete_state(message.from_user.id, message.chat.id)
    #–í—ã–∑–≤–∞—Ç—å inline –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–º –ø–æ–∂–∞–ª—É–π





@bot.message_handler()  # –≠—Ç–∞ —à—Ç—É–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∏–∑—É, –æ–Ω–∞ –∑–∞–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–ª–∞—Å—Å—ã —Å—É—á–∫–∞
def ostavit_zayavka(message):
    if message.text == 'üìõ –ó–∞—è–≤–∫–∞':
        bot.send_message(message.chat.id, '–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª –ó–∞—è–≤–∫–∞')
        bot.send_message(message.chat.id,  # —Å–æ–∑–¥–∞–ª –º–µ–Ω—é –≤ –æ–±—â–µ–º.
                         text="–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –∑–∞—è–≤–∫–∞, –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ –º–µ–Ω—é. ".format(
                             message.from_user), reply_markup=buttons_main_ostavitzayavka_podelitsa_nazad())
        print('–Ø –•–ï–ù–î–õ–ï–†–û–ú –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥–∏–ª –ó–ê–Ø–í–ö–ê')
    elif message.text == 'üõÖ –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id,  # —Å–æ–∑–¥–∞–ª –º–µ–Ω—é –≤ –æ–±—â–µ–º.
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–∞–∑ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É".format(
                             message.from_user), reply_markup=buttons_main_menu())
    elif message.text == 'üìû –°–≤—è–∑—å':
        bot.send_message(message.chat.id,  # —Å–æ–∑–¥–∞–ª –º–µ–Ω—é –≤ –æ–±—â–µ–º.
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–∞–∑ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É".format(
                             message.from_user), reply_markup=buttons_svazatsa())
    elif message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        pass
    elif message.text == 'üìõ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':
        bot.set_state(message.from_user.id, MyStates.zayavka_step1, message.chat.id)
        bot.send_message(message.chat.id, '–®–ê–ì 1/3. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã...')
    elif message.text == '‚òé –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã':
        pass
    elif message.text == 'üîî –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º':
        pass


@bot.callback_query_handler(func=lambda call:True)
def otveti_na_inline_knopki(call):
    if call.message:
        if call.data == 'perezvonite_mne':
            bot.send_message(call.message.chat.id, ' –Ø –≤–∏–∂—É –≤—ã –Ω–∞–∂–∞–ª–∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –í–∞–º!')
        elif call.data == 'svaz_so_mnoy_v_chat_bote':
            bot.send_message(call.message.chat.id, ' –Ø –≤–∏–∂—É –≤—ã –Ω–∞–∂–∞–ª–∏ –°–≤—è–∑–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ!')
        elif call.data == 'nazad_iz_svarhites_so_mnoy':
            bot.send_message(call.message.chat.id, ' –Ø –≤–∏–∂—É –≤—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥ Inline –∫–Ω–æ–ø–∫–∞!')
            bot.send_message(call.message.chat.id,  # —Å–æ–∑–¥–∞–ª –º–µ–Ω—é –≤ –æ–±—â–µ–º.
                             text="–ú—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥,–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ".format(
                                 call.message.from_user), reply_markup=buttons_main_menu())



# @bot.message_handler(state=MyStates.svazatsa)
# def ready_for_answer(message):
#     bot.send_message(message.chat.id, "–Ø –ø–æ–ø–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—è–≤–∫–∏")




bot.add_custom_filter(custom_filters.StateFilter(bot))  # —Ö–º —á—Ç–æ–∂–µ –¥–µ–ª–∞—é—Ç —ç—Ç–æ –¥–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞–¥–æ–±—ã —É–∑–Ω–∞—Ç—å
bot.add_custom_filter(custom_filters.IsDigitFilter())

bot.infinity_polling(skip_pending=True)
