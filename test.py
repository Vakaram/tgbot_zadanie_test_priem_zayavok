# # https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/custom_states.py
#
# import telebot  # telebot
# from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
# from telebot import custom_filters
# from telebot.handler_backends import State, StatesGroup  # States
# from telebot.storage import StateMemoryStorage
# from create_bot import telebot_test
# from database.create_database import create_database_def
# from database.add_table_values import *
# from psycopg2 import Error
# import logging
# import re
# # —â–∞ –±—É–¥–µ–º —Ç—è–Ω—É—Ç—å –∏–º–ø–æ—Ä—Ç—ã
# #–Ω–∞–¥–æ –±—ã–ª–æ —Å—Ä–∞–∑—É –¥–µ–ª–∞—Ç—å requarements —Å–µ–π—á–∞—Å —Å–¥–µ–ª–∞—é
#
#
# def buttons_main_menu(message):  # –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—é –º–µ–Ω—é—à–∫—É
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton("üìõ –ó–∞—è–≤–∫–∞")
#     btn2 = types.KeyboardButton("üìû –°–≤—è–∑—å")
#     markup.add(btn1, btn2)
#     btn3 = types.KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
#     btn4 = types.KeyboardButton("‚òé –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
#     markup.add(btn3)
#     markup.add(btn4)
#     bot.send_message(message.chat.id,
#                      text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –†–∞–∑ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É".format(
#                          message.from_user), reply_markup=markup)
#     print('–Ø –¥–æ—à—ë–ª –¥–æ –∫–æ–Ω—Ü–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ')
#
# def buttons_main_ostavitzayavka_podelitsa_nazad(message):  # –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—é –º–µ–Ω—é—à–∫—É
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton("üìõ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
#     btn2 = types.KeyboardButton("üîî –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º")
#     markup.add(btn1, btn2)
#     btn3 = types.KeyboardButton("üõÖ –ù–∞–∑–∞–¥")
#     markup.add(btn3)
#     bot.send_message(message.chat.id,
#                      text="–≠—Ç–æ —è –≤ —Å—Ç–∞–¥–∏–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏ –Ω–∞–∑–∞–¥".format(
#                          message.from_user), reply_markup=markup)
#     print('–Ø –¥–æ—à—ë–ª –¥–æ –∫–æ–Ω—Ü–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ')
#
#
# def buttons_svazatsa(message):#—Å–æ–∑–¥–∞—é inline knopki –¥–ª—è —Å–≤—è–∑–∞—Ç—å—Å—è
#     markup = types.InlineKeyboardMarkup(row_width=1)
#     btn1 = types.InlineKeyboardButton("–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ", callback_data='perezvonite_mne')
#     btn2 = types.InlineKeyboardButton("–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–π–æ –≤ —á–∞—Ç-–±–æ—Ç–µ", callback_data='svaz_so_mnoy_v_chat_bote')
#     btn3 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='nazad_iz_svarhites_so_mnoy')
#     markup.add(btn1, btn2, btn3)
#     bot.send_message(message.chat.id,
#                      text="–¢—ã –Ω–∞–∂–∞–ª—å –°–≤—è–∑–∞—Ç—å—Å—è –Ω—É –≤–æ—Ç —Ç–µ–±–µ –∏ –º–µ–Ω—é".format(
#                          message.from_user), reply_markup=markup)
#
# def ostavi_zayavka_shag1(message):#—Å–æ–∑–¥–∞—é inline knopki –¥–ª—è —Å–≤—è–∑–∞—Ç—å—Å—è
#     markup = types.InlineKeyboardMarkup(row_width=1)
#     btn1 = types.InlineKeyboardButton("–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ", callback_data='perezvonite_mne')
#     btn2 = types.InlineKeyboardButton("–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–π–æ –≤ —á–∞—Ç-–±–æ—Ç–µ", callback_data='svaz_so_mnoy_v_chat_bote')
#     btn3 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='nazad_iz_svarhites_so_mnoy')
#     markup.add(btn1, btn2, btn3)
#     bot.send_message(message.chat.id,
#                      text="–¢—ã –Ω–∞–∂–∞–ª—å –°–≤—è–∑–∞—Ç—å—Å—è –Ω—É –≤–æ—Ç —Ç–µ–±–µ –∏ –º–µ–Ω—é".format(
#                          message.from_user), reply_markup=markup)
#
# print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∑–∞–ø—É—Å—Ç–∏–ª—Å—è')
#
# state_storage = StateMemoryStorage()
# bot = telebot.TeleBot(telebot_test, state_storage=state_storage)
# create_database_def()  # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥, —Å–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É(–¥–∞–ª—å—à–µ –∏—Ö –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –¥–æ–ø–∏—à—É —Å –ø–µ—Ä–≤–∏—á–Ω—ã–º –∫–ª—é—á—ë–º –∏ –±–µ–∑
#
# # class MyStates(StatesGroup):
# #     name = State()
# #     phone = State()
# #     # ostavit_zayavka = State()
#     # svazatsa = State() #—Å–≤—è–∑–∞—Ç—å—Å—è —ç—Ç–æ –∫–æ–≥–¥–∞ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
#
#
# class State_ostavit_zayavky(StatesGroup):
#     shag1 = State()
#     shag2 = State()
#     shag3 = State()
#     shag4 = State()
# @bot.message_handler()
#
# @bot.message_handler(commands=['start'])
# def start_ex(message):
#     # bot.delete_state(message.from_user.id,message.chat.id)  # –¥–æ–±–∞–≤–∏–ª 29.10 –ø–æ—Ç–æ–º—É—á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–¥–æ –±—ã–ª–æ —á–∏—Å—Ç–∏—Ç—å —á—Ç–æ–±—ã –∫–æ–¥ –¥–∞–ª—å—à–µ —à–∞–≥–∞–ª
#     bot.send_message(message.chat.id, '–Ø –≤ —Å—Ç–∞—Ä—Ç–µ –≤ –ø—Ä–µ–¥–ª–∞–≥–∞—é –±–æ—Ç—É –ø–æ–π—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ  1  ')
#     bot.set_state(message.from_user.id, State_ostavit_zayavky.shag1,message.chat.id)
#     # buttons_main_menu(message)
#
#
# bot.add_custom_filter(custom_filters.StateFilter(bot))  # —Ö–º —á—Ç–æ–∂–µ –¥–µ–ª–∞—é—Ç —ç—Ç–æ –¥–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞–¥–æ–±—ã —É–∑–Ω–∞—Ç—å
# bot.add_custom_filter(custom_filters.IsDigitFilter())
#
#
#
#  # —Ç—É—Ç –ø–æ—à–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏
# def ostavit_zayavka(message):
#     if message.text == 'üìõ –ó–∞—è–≤–∫–∞':
#         #—Ç—É—Ç —Å—Ç–∞—Ç—É—Å –Ω–µ –º–µ–Ω—è–µ–º –ø–æ–∫–∞ –Ω–µ –Ω–∞–¥–æ , –∞ –≤ –∫–Ω–æ–ø–∫–µ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞–¥–æ
#         bot.send_message(message.chat.id, '–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª –ó–∞—è–≤–∫–∞')
#         buttons_main_ostavitzayavka_podelitsa_nazad(message)  # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤—É –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω—é
#         print('–Ø –•–ï–ù–î–õ–ï–†–û–ú –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥–∏–ª –ó–ê–Ø–í–ö–ê')
#     elif message.text == 'üõÖ –ù–∞–∑–∞–¥':
#         buttons_main_menu(message)
#     elif message.text == 'üìû –°–≤—è–∑—å':
#         # bot.set_state(message.from_user.id, MyStates.svazatsa, message.chat.id)#—Ç—É—Ç –ø–æ–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å—ë –æ–∫
#         buttons_svazatsa(message)
#     elif message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
#         pass
#     elif message.text == '‚òé –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã':
#         pass
#     elif message.text == 'üìõ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':
#         # # bot.delete_state(message.from_user.id, message.chat.id)
#         # bot.send_message(message.chat.id, '–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª –û–°–¢–ê–í–ò–¢–¨ –ó–ê–Ø–í–ö–£ –Ω—É —Ç–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–π')
#         # # bot.set_state(message.from_user.id, MyStates.name, message.chat.id)
#         # bot.set_state(message.from_user.id, State_ostavit_zayavky.shag1, message.chat.id)
#         # seychas_napisali = message.text
#         print('–Ø –•–ï–ù–î–õ–ï–†–û–ú –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥–µ–ª –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ')
#     elif message.text == 'üîî –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º':
#         pass
#
#
#
#
# @bot.message_handler(state=State_ostavit_zayavky.shag1)
# def zayavka_adres_shag1(message): #–∫–ª–∞—Å—Å,—Ç–æ —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ —à–∞–≥ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π
#     print('–Ø –•–ï–ù–î–õ–ï–†–û–ú –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —à–∞–≥1 ,—è —Å—é–¥–∞ –¥–æ—à—ë–ª ? ')
#     bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É', parse_mode='html') #–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
#     adres = message.text
#     bot.set_state(message.from_user.id, State_ostavit_zayavky.shag2, message.chat.id)
#     with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
#         data['adres'] = message.text
# #—Ç—É—Ç —à–∞–≥–∏ –¥–ª—è –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏ –ª–µ–≤–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω–∞–º–∏
#
#
# @bot.message_handler(state=State_ostavit_zayavky.shag2)
# def zayavka_photo_video_shag2(message):
#     seychas_napisali = message.text
#     print(seychas_napisali)
#     bot.send_message(message.chat.id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–∫—É –∏–ª–∏ –≤–∏–¥–µ–æ ', parse_mode='html')
#     bot.set_state(message.from_user.id, State_ostavit_zayavky.shag3, message.chat.id) #–Ω–∞–¥–æ –±—Ä–∞—Ç—å id —Ñ–∞–π–ª–∞(—Ñ–æ—Ç–æ,–≤–∏–¥–µ–æ) –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º json –∏–ª–∏
#     with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
#         data['photo_video'] = message.text
# @bot.message_handler(state=State_ostavit_zayavky.shag3)
# def zayavka_shag3(message):
#     seychas_napisali = message.text
#     print(seychas_napisali)
#     bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è,–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É', parse_mode='html')
#     bot.set_state(message.from_user.id, State_ostavit_zayavky.shag4,message.chat.id)
#     with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
#         data['prichina_obrasheniya'] = message.text
# @bot.message_handler(state=State_ostavit_zayavky.shag4)
# def zayavka_shag3(message):
#     seychas_napisali = message.text
#     print(seychas_napisali)
#     bot.send_message(message.chat.id, '–í–∞—à–µ –æ–±—Ä–∞–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ', parse_mode='html')
#     with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
#         sobral_zayavku = \
#               (f"name: {data['adres']}\n"
#                f"phone: {data['photo_video']}\n"
#                f"phone: {data['prichina_obrasheniya']}\n")
#         print(sobral_zayavku)
#
#
#
# @bot.callback_query_handler(func=lambda call:True)
# def otveti_na_inline_knopki(call):
#     if call.message:
#         if call.data == 'perezvonite_mne':
#             # bot.send_message(call.message.chat.id, ' –Ø –≤–∏–∂—É –≤—ã –Ω–∞–∂–∞–ª–∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –í–∞–º!')
#             # bot.delete_state(message.from_user.id, message.chat.id)
#             bot.send_message(call.message.chat.id, '–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª –û–°–¢–ê–í–ò–¢–¨ –ó–ê–Ø–í–ö–£ –Ω—É —Ç–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–π')
#             # bot.set_state(call.message.from_user.id, MyStates.name, call.message.chat.id)
#             # bot.set_state(call.message.from_user.id, State_ostavit_zayavky.shag1, call.message.chat.id)
#             seychas_napisali = call.message.text
#             print('–Ø –•–ï–ù–î–õ–ï–†–û–ú –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥–µ–ª –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ')
#         elif call.data == 'svaz_so_mnoy_v_chat_bote':
#             bot.send_message(call.message.chat.id, ' –Ø –≤–∏–∂—É –≤—ã –Ω–∞–∂–∞–ª–∏ –°–≤—è–∑–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ!')
#         elif call.data == 'nazad_iz_svarhites_so_mnoy':
#             bot.send_message(call.message.chat.id, ' –Ø –≤–∏–∂—É –≤—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥ Inline –∫–Ω–æ–ø–∫–∞!')
#             buttons_main_menu(call.message)
#
#
#
#         # TODO: –î–ª—è —ç—Ç–æ–π —á–∞—Å—Ç–∏ –∫–æ–¥–∞ ,  –ø–æ–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
#
#
#
#
#
# # @bot.message_handler(state=MyStates.svazatsa)
# # def ready_for_answer(message):
# #     bot.send_message(message.chat.id, "–Ø –ø–æ–ø–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—è–≤–∫–∏")
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# bot.infinity_polling(skip_pending=True)




import telebot  # telebot

from telebot import custom_filters
from telebot.handler_backends import State, StatesGroup  # States

# States storage
from telebot.storage import StateMemoryStorage

from create_bot import telebot_test

# Now, you can pass storage to bot.
state_storage = StateMemoryStorage()  # you can init here another storage

bot = telebot.TeleBot(telebot_test,
                      state_storage=state_storage)


# States group.
class MyStates(StatesGroup):
    # Just name variables differently
    name = State()  # creating instances of State class is enough from now
    surname = State()
    age = State()


@bot.message_handler(commands=['start'])
def start_ex(message):
    """
    Start command. Here we are starting state
    """
    bot.set_state(message.from_user.id, MyStates.name, message.chat.id)
    bot.send_message(message.chat.id, 'Hi, write me a name')


# Any state
@bot.message_handler(state="*", commands=['cancel'])
def any_state(message):
    """
    Cancel state
    """
    bot.send_message(message.chat.id, "Your state was cancelled.")
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(state=MyStates.name)
def name_get(message):
    """
    State 1. Will process when user's state is MyStates.name.
    """
    bot.send_message(message.chat.id, 'Now write me a surname')
    bot.set_state(message.from_user.id, MyStates.surname, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['name'] = message.text


@bot.message_handler(state=MyStates.surname)
def ask_age(message):
    """
    State 2. Will process when user's state is MyStates.surname.
    """
    bot.send_message(message.chat.id, "What is your age?")
    bot.set_state(message.from_user.id, MyStates.age, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['surname'] = message.text


# result
@bot.message_handler(state=MyStates.age, is_digit=True)
def ready_for_answer(message):
    """
    State 3. Will process when user's state is MyStates.age.
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        msg = ("Ready, take a look:\n<b>"
               f"Name: {data['name']}\n"
               f"Surname: {data['surname']}\n"
               f"Age: {message.text}</b>")
        bot.send_message(message.chat.id, msg, parse_mode="html")
    bot.delete_state(message.from_user.id, message.chat.id)


# incorrect number
@bot.message_handler(state=MyStates.age, is_digit=False)
def age_incorrect(message):
    """
    Wrong response for MyStates.age
    """
    bot.send_message(message.chat.id, 'Looks like you are submitting a string in the field age. Please enter a number')


# register filters

bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.add_custom_filter(custom_filters.IsDigitFilter())

bot.infinity_polling(skip_pending=True)
